Title:  Commands Detail

Seq:    15

Type:   md

Code:

Body:

### delims Command

If used at all, this command should be the first command in the template file. This command overrides the standard delimiters used to recognize the beginnings and ends of commands and variables, for the remainder of the current template file. The command can have one to five operands. Each operand will become a new delimiter. They should be specified in the following order.

* beginning of a command (normally paired less than signs)
* the end of a command (normally paired greater than signs)
* the beginning of a variable (normally paired less than signs)
* the end of a variable (normally paired greater than signs)
* the beginning of variable modifiers (normally a single ampersand)

Note that, in addition to specification of the delims command, the first characters found on the first line of the template file can trigger the Notenik template processor to use an alternate set of delimiters.

### set Command

This command can define a global variable and set its value. This command would normally have three operands: the name of the global variable, an operator, and a value.

- Global variable name. This should not be the same as the name of any variable name specified by the input data file. The global variable name, when used as the object of a set command, should not be enclosed within the normal variable delimiters, since this would cause the variable name to be replaced by its current value.

- Operator. Any of the following operators can be used.

	+ =  — This will cause the global variable to be set equal to the following value.

	+ += or simply + — This will cause the value to be added to the current value of the global variable.

	+ ++ — This can be used to add a value of 1 to the current value of the global variable, without having to specify the following value of 1. (In this case, the set command only takes two operands.)

	+ -= or simply - — This will cause the value to be subtracted from the current value of the global variable.

	+ \-\- Two minus signs in a row can be used to subtract a value of 1 from the current value of the global variable, without having to specify the following value of 1. (In this case, the set command only requires two operands.)

- Value. This can be a literal or a variable (in which case it should be surrounded by the normal variable delimiters). The value can be a text string or an integer.

One intended use for the set command is to support a line counter. By initializing the value to 0, and then adding to it whenever an output line is generated, the IF command can be used to check for page overflow (in a table column, for example), and then start a new page or column, resetting the counter to 0 again.

Another common use for the set command is to preserve record variables in global variables so that they will be available within an ifendgroup block.

### output Command

This command names and opens the output file, where the results of the template merge will be stored. The single operand is the name of the output file. This command would normally be the first line in your template file. Subsequent template records will be written to the output file.

Note, however, that the filename can contain a variable name. In this case, the output command would follow the nextrec command, and a new output file would be opened for each row input.


### nextrec Command

This command indicates the beginning of the code that will be processed/written out once per data row. Lines prior to the nextrec command will only be processed/written out once.

### definegroup Command

This is the first of five commands that define key fields and then conditionally write output when there is a break on any of those fields. 

Up to ten group break fields can be defined. Each must be assigned a number from 1 to 10. Numbers should be assigned sequentially beginning with 1. 

Input data should normally be sorted by the same fields used in any definegroup commands. 

A definegroup command should normally follow a nextrec command. Each time that a definegroup command is encountered, Notenik stores the value of the variable, and checks for a change in the value for the specified group number. 

Definegroup commands should precede ifendgroup and ifnewgroup commands, and should generally be specified in ascending order by group number. 

The definegroup command has two operands.

* Group Number. This must be a number from 1 to 10. Numbers should be assigned sequentially beginning with 1. Lower-numbered groups are considered more major than higher-numbered groups, in the sense that lower-numbered group breaks will automatically trigger higher-numbered group breaks.

* Variable Name. This is the name of the key field variable. The variable should be surrounded by the normal variable delimiters, so that Notenik will see, not the name of the variable, but its current value.

### ifendgroup Command

This is the second of the five group commands. 

Lines following this command and preceding the next group or endif command will be written to the output file at the end of a group of records sharing a common value for this key field. 

Ifendgroup commands should follow definegroup commands and precede ifnewgroup commands, and should generally be specified in *descending* order by group number. 

The ifendgroup command has one operand.

- Group Number. The group number whose group-ending output lines follow.

### trailing Command

The trailing command can be used to eliminate a trailing delimiter, or replace it with another character. 

For example, if previous lines have been written out with a series of names, each followed by a comma, then a trailing command could be used after an ifendgroup command to eliminate the last comma written out (or replace it with a closing parenthesis). 

The trailing command requires one operand, and allows a second operand. 

+ The first operand specifies a trailing character to be removed or replaced. A backwards search from the end of the output already produced will look for the the specified character. Whitespace and newline characters will be ignored. Any other character will terminate the search. If the specified character is found in a trailing position, then it will be removed. If a second operand is specified, then that character will serve as the first character's replacement. Note that the word "comma" may be spelled out as the first operand in order to search for a trailing comma. (Simply using the comma character will not work, since this will be interpreted as a delimiter between the operands of the command.) 

+ A second operand, if specified, will serve as a replacement for the character specified by the first position.

### ifendlist Command

This is the third of the five group commands. 

Lines following this command and preceding the next group or endif command will be written to the output file at the end of a list of records containing this key field. 

The end of a list will be triggered by a change in key values at the next higher level, or by a record containing blanks at the current group level. 

Ifendlist commands should follow ifendgroup commands and precede ifnewlist commands, and should generally be specified in *descending* order by group number. 

The ifendlist command has one operand. Note that the ifendlist and ifnewlist commands can generally be used to insert HTML tags to end a list and begin a list.

* Group Number. The group number whose list-ending output lines follow.

Note that references to record variables within an ifendlist block will retrieve the data from the record causing the break (i.e., the first record in the new group), not the last record in the group just ended. Use the set command to save data in global variables if you need to later access it when a list break has been detected.

### ifnewlist Command

This is the fourth of the five group commands. 

Lines following this command and preceding the next group or endif command will be written to the output file at the beginning of a new list of records at this group level. 

Ifnewlist commands should follow definegroup, ifendgroup and ifendlist commands, should precede ifnewgroup commands, and should generally be specified in *ascending* order by group number. The ifnewlist command has one operand.

+ Group Number. The group number whose list-beginning output lines follow.

### ifnewgroup Command

This is the fifth of the five group commands. 

Lines following this command and preceding the next group or endif command will be written to the output file at the beginning of a group of records sharing a common value for this key field. 

Ifnewgroup commands should follow all other group commands, and should generally be specified in *ascending* order by group number. 

The ifnewgroup command has one operand.


+ Group Number. The group number whose group-beginning output lines follow.

### if Command

The if command can be used to test a variable to see if it is non-blank. If the variable is non-blank, then the following lines up to the closing endif command will be subject to normal output processing. If the variable is blank, then following lines will be skipped until the closing endif command is encountered. In this case, the first and only operand would be the variable to be tested.

The if command can also be used to test a variable to compare it to a constant (or other variable). In this case, the command would have three or more operands: the name of the variable, a logical operator, and one or more values.

In this second scenario, three operands are provided: the first value (variable or constant), a comparison operator, and the second value (variable or constant). 

Any of the following comparisons may be performed, and each may be invoked with the appropriate symbols, abbreviation or words. Note that slashes are used in the following list to separate alternative representations for each operator. 

1. = / == / eq / equals 
2. &gt; / gt / greater than 
3. &gt;= / !< | / ge / greater than or equal to
4. < / lt / less than
5. <= / !> / le / less than or equal to
6. <&gt; / != / ne / not equal to
7. () / [] / co / contains
8. !() / ![] / nc / does not contain
9. (<) / [<] / st / starts with 
10. !(<) / ![<] / ns / does not start with
11. (&gt;) / [&gt;] / fi / ends with
12. !(&gt;) / ![&gt;] / ng / does not end with

Note that, if both values appear to be integers, then a numeric comparison will be performed for operands 1 - 6. In all other cases, strings will be compared.

### else Command

The else command terminates the scope of its preceding if, ifchange, ifendgroup or ifnewgroup command, and applies the opposite logical condition to the following template lines.


### endif Command

The endif command terminates the scope of its corresponding if, ifchange, ifendgroup or ifnewgroup command.


### copyfile Command

This command causes a file to be copied from the location specified by the first operand, to the location specified by the second operand. 

Note that this command is designed to be used with the Image Name field, so that an image file accompanying a note can be copied to an appropriate output folder, from which it will be referenced by an output web page.

### include Command

This command allows you to include text from another file into the output stream being generated by the template.

An optional operand of "copy" will ensure that the include file is included without conversion; otherwise, if the input and output file extensions are different, and are capable of conversion, the input file will be converted to the output file's format (for example, [Markdown][] or [Textile][] can be converted to html).

[markdown]: https://daringfireball.net/projects/markdown/
[textile]:  https://textile-lang.com

Markdown conversion will be done using the [flexmark](https://github.com/vsch/flexmark-java) processor, using the options for typographic conversions (as with SmartyPants), table generation and definition lists.

Textile conversion will be done using Notenik's own Textile processor which is, admittedly, incomplete, and yet may still be useful for some users. 

If converting from Markdown, then an optional operand of "nometa" will cause metadata lines to be skipped when generating the HTML output; otherwise, they will be included.

The filename may include variables, allowing you to tailor the included content based on one or more fields from your input data source. This is especially useful when you would like to include output from another template in the output generated by this template (effectively combining outputs from two separate templates into a single output). If an include file is not found, then it will simply be skipped and processing will continue, with a log message to note the event.

For any conversion resulting in HTML, a pseudo-tag of &lt;toc&gt; can be used to generate a table of contents based on following heading tags. An optional attribute of "from" can be used to specify the beginning of a range of heading levels to be included; an optional attribute of "through" or "thru" can be used to specify the end of a range of heading levels to be included. See the following example.

		<toc from="h2" thru="h4" />

### allfields Command

This command will cause all of the fields in the current record/row/note to be written out as HTML, formatted as they would appear on the Display tab within Notenik. 


### loop Command

This command indicates the end of the code that will be processed/written out once per data row. Lines after the loop command will be processed/written out once per execution.


